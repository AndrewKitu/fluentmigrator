// ***********************************************************************
// Assembly         : FluentMigrator.Tests
// Author           : eivin
// Created          : 10-10-2019
//
// Last Modified By : eivin
// Last Modified On : 10-10-2019
// ***********************************************************************
// <copyright file="Oracle12CColumnTests.cs" company="FluentMigrator Project">
//     Sean Chambers and the FluentMigrator project 2008-2018
// </copyright>
// <summary></summary>
// ***********************************************************************
#region License
//
// Copyright (c) 2018, Fluent Migrator Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#endregion

using FluentMigrator.Runner.Generators.Oracle;
using FluentMigrator.Tests.Unit.Generators.Oracle;

using NUnit.Framework;

using Shouldly;

namespace FluentMigrator.Tests.Unit.Generators.Oracle12C
{
    /// <summary>
    /// Defines test class Oracle12CColumnTests.
    /// Implements the <see cref="FluentMigrator.Tests.Unit.Generators.Oracle.OracleBaseColumnTests{FluentMigrator.Runner.Generators.Oracle.Oracle12CGenerator}" />
    /// </summary>
    /// <seealso cref="FluentMigrator.Tests.Unit.Generators.Oracle.OracleBaseColumnTests{FluentMigrator.Runner.Generators.Oracle.Oracle12CGenerator}" />
    [TestFixture]
    public class Oracle12CColumnTests : OracleBaseColumnTests<Oracle12CGenerator>
    {
        /// <summary>
        /// Defines the test method CanCreateAutoIncrementColumnWithCustomSchema.
        /// </summary>
        [Test]
        public override void CanCreateAutoIncrementColumnWithCustomSchema()
        {
            var expression = GeneratorTestHelper.GetAlterColumnAddAutoIncrementExpression();
            expression.SchemaName = "TestSchema";

            var result = Generator.Generate(expression);
            result.ShouldBe("ALTER TABLE TestSchema.TestTable1 MODIFY TestColumn1 NUMBER(10,0) GENERATED ALWAYS AS IDENTITY ");
        }

        /// <summary>
        /// Defines the test method CanCreateAutoIncrementColumnWithDefaultSchema.
        /// </summary>
        [Test]
        public override void CanCreateAutoIncrementColumnWithDefaultSchema()
        {
            var expression = GeneratorTestHelper.GetAlterColumnAddAutoIncrementExpression();
            var result = Generator.Generate(expression);
            result.ShouldBe("ALTER TABLE TestTable1 MODIFY TestColumn1 NUMBER(10,0) GENERATED ALWAYS AS IDENTITY ");
        }

        /// <summary>
        /// Defines the test method CanCreateAutoIncrementColumnWithDefaultSchemaAndDefaultIdentity.
        /// </summary>
        [Test]
        public void CanCreateAutoIncrementColumnWithDefaultSchemaAndDefaultIdentity()
        {
            var expression = GeneratorTestHelper.GetAlterColumnAddAutoIncrementExpression();
            expression.Column.AdditionalFeatures.Add("OracleIdentityGeneration", OracleGenerationType.ByDefault);
            var result = Generator.Generate(expression);
            result.ShouldBe("ALTER TABLE TestTable1 MODIFY TestColumn1 NUMBER(10,0) GENERATED BY DEFAULT AS IDENTITY ");
        }

        /// <summary>
        /// Defines the test method CanCreateAutoIncrementColumnWithDefaultSchemaAndDefaultOnNullIdentity.
        /// </summary>
        [Test]
        public void CanCreateAutoIncrementColumnWithDefaultSchemaAndDefaultOnNullIdentity()
        {
            var expression = GeneratorTestHelper.GetAlterColumnAddAutoIncrementExpression();
            expression.Column.AdditionalFeatures.Add("OracleIdentityGeneration", OracleGenerationType.ByDefaultOnNull);
            var result = Generator.Generate(expression);
            result.ShouldBe("ALTER TABLE TestTable1 MODIFY TestColumn1 NUMBER(10,0) GENERATED BY DEFAULT ON NULL AS IDENTITY ");
        }


        /// <summary>
        /// Defines the test method CanCreateAutoIncrementColumnWithDefaultSchemaAndStartsWith.
        /// </summary>
        [Test]
        public void CanCreateAutoIncrementColumnWithDefaultSchemaAndStartsWith()
        {
            var expression = GeneratorTestHelper.GetAlterColumnAddAutoIncrementExpression();
            expression.Column.AdditionalFeatures.Add("OracleIdentityStartWith", 11L);
            var result = Generator.Generate(expression);
            result.ShouldBe("ALTER TABLE TestTable1 MODIFY TestColumn1 NUMBER(10,0) GENERATED ALWAYS AS IDENTITY (START WITH 11)");
        }

        /// <summary>
        /// Defines the test method CanCreateAutoIncrementColumnWithDefaultSchemaAndIncrementBy.
        /// </summary>
        [Test]
        public void CanCreateAutoIncrementColumnWithDefaultSchemaAndIncrementBy()
        {
            var expression = GeneratorTestHelper.GetAlterColumnAddAutoIncrementExpression();
            expression.Column.AdditionalFeatures.Add("OracleIdentityIncrementBy", 2);
            var result = Generator.Generate(expression);
            result.ShouldBe("ALTER TABLE TestTable1 MODIFY TestColumn1 NUMBER(10,0) GENERATED ALWAYS AS IDENTITY (INCREMENT BY 2)");
        }

        /// <summary>
        /// Defines the test method CanCreateAutoIncrementColumnWithDefaultSchemaAndMinValue.
        /// </summary>
        [Test]
        public void CanCreateAutoIncrementColumnWithDefaultSchemaAndMinValue()
        {
            var expression = GeneratorTestHelper.GetAlterColumnAddAutoIncrementExpression();
            expression.Column.AdditionalFeatures.Add("OracleIdentityMinValue", 5L);
            var result = Generator.Generate(expression);
            result.ShouldBe("ALTER TABLE TestTable1 MODIFY TestColumn1 NUMBER(10,0) GENERATED ALWAYS AS IDENTITY (MINVALUE 5)");
        }

        /// <summary>
        /// Defines the test method CanCreateAutoIncrementColumnWithDefaultSchemaAndMaxValue.
        /// </summary>
        [Test]
        public void CanCreateAutoIncrementColumnWithDefaultSchemaAndMaxValue()
        {
            var expression = GeneratorTestHelper.GetAlterColumnAddAutoIncrementExpression();
            expression.Column.AdditionalFeatures.Add("OracleIdentityMaxValue", 7L);
            var result = Generator.Generate(expression);
            result.ShouldBe("ALTER TABLE TestTable1 MODIFY TestColumn1 NUMBER(10,0) GENERATED ALWAYS AS IDENTITY (MAXVALUE 7)");
        }

        /// <summary>
        /// Defines the test method CanCreateAutoIncrementColumnWithDefaultSchemaAndAllIdentityOptions.
        /// </summary>
        [Test]
        public void CanCreateAutoIncrementColumnWithDefaultSchemaAndAllIdentityOptions()
        {
            var expression = GeneratorTestHelper.GetAlterColumnAddAutoIncrementExpression();
            expression.Column.AdditionalFeatures.Add("OracleIdentityStartWith", 1L);
            expression.Column.AdditionalFeatures.Add("OracleIdentityIncrementBy", 2);
            expression.Column.AdditionalFeatures.Add("OracleIdentityMinValue", 3L);
            expression.Column.AdditionalFeatures.Add("OracleIdentityMaxValue", 4L);
            var result = Generator.Generate(expression);
            result.ShouldBe("ALTER TABLE TestTable1 MODIFY TestColumn1 NUMBER(10,0) GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 2 MINVALUE 3 MAXVALUE 4)");
        }
    }
}
